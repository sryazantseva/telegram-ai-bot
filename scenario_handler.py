import json
import uuid
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton

SCENARIO_FILE = "scenario_store.json"

def init_scenarios(bot, admin_id):
    @bot.message_handler(commands=["—Å—Ü–µ–Ω–∞—Ä–∏–π"])
    def handle_scenario(message):
        if message.from_user.id != admin_id:
            return
        bot.send_message(message.chat.id, "üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å—Ü–µ–Ω–∞—Ä–∏—è:")
        bot.register_next_step_handler(message, get_scenario_text)

    def get_scenario_text(message):
        text = message.text
        bot.send_message(message.chat.id, "üìé –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç'):")
        bot.register_next_step_handler(message, get_scenario_file, text)

    def get_scenario_file(message, text):
        file_id = None
        if message.text and message.text.lower() == '–Ω–µ—Ç':
            pass
        elif message.document:
            file_id = message.document.file_id
        else:
            bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
            return
        bot.send_message(message.chat.id, "üîó –í—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É (–∏–ª–∏ '–Ω–µ—Ç'):")
        bot.register_next_step_handler(message, preview_scenario, text, file_id)

    def preview_scenario(message, text, file_id):
        link = message.text if message.text.lower() != '–Ω–µ—Ç' else ""
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton("‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data=f"save_scenario|{uuid.uuid4()}|{file_id or 'no'}|{link or 'no'}|{text}"))
        final_text = f"üìò –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Ü–µ–Ω–∞—Ä–∏—è:\n\n{text}"
        if link:
            final_text += f"\n\nüîó {link}"
        if file_id:
            bot.send_document(message.chat.id, file_id, caption=final_text)
        else:
            bot.send_message(message.chat.id, final_text)
        bot.send_message(message.chat.id, "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —ç—Ç–æ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π?", reply_markup=markup)

    @bot.callback_query_handler(func=lambda call: call.data.startswith("save_scenario"))
    def handle_save_scenario(call):
        _, scenario_id, file_id, link, text = call.data.split("|", 4)
        bot.send_message(call.message.chat.id, "üí¨ –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫–∏–π –∫–æ–¥ —Å—Ü–µ–Ω–∞—Ä–∏—è (–ª–∞—Ç–∏–Ω–∏—Ü–µ–π):")
        bot.register_next_step_handler(call.message, save_scenario_final, text, file_id if file_id != 'no' else None, link if link != 'no' else "")

    def save_scenario_final(message, text, file_id, link):
        code = message.text.strip()
        with open(SCENARIO_FILE, "r") as f:
            scenarios = json.load(f)
        scenarios[code] = {
            "text": text,
            "file_id": file_id,
            "file_or_link": link
        }
        with open(SCENARIO_FILE, "w") as f:
            json.dump(scenarios, f)

        bot.send_message(
            message.chat.id,
            f"‚úÖ –°—Ü–µ–Ω–∞—Ä–∏–π —Å–æ—Ö—Ä–∞–Ω—ë–Ω!\n–°—Å—ã–ª–∫–∞: t.me/{bot.get_me().username}?start={code}"
        )
