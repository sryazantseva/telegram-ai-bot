import telebot
import os
import json
from openai import OpenAI

# Telegram bot setup
BOT_TOKEN = os.environ.get("BOT_TOKEN")
ADMIN_ID = int(os.environ.get("ADMIN_ID", 0))
bot = telebot.TeleBot(BOT_TOKEN)

# OpenAI client via ProxyAPI
OPENAI_API_KEY = os.environ.get("OPENAI_API_KEY")
client = OpenAI(
    api_key=OPENAI_API_KEY,
    base_url="https://api.proxyapi.ru/openai/v1"
)

# Files
SCENARIO_FILE = "scenario_store.json"
USER_FILE = "user_db.json"

if not os.path.exists(SCENARIO_FILE):
    with open(SCENARIO_FILE, "w") as f:
        json.dump({}, f)

if not os.path.exists(USER_FILE):
    with open(USER_FILE, "w") as f:
        json.dump([], f)

def save_user(user_id):
    with open(USER_FILE, "r") as f:
        users = json.load(f)
    if user_id not in users:
        users.append(user_id)
        with open(USER_FILE, "w") as f:
            json.dump(users, f)

@bot.message_handler(commands=["start"])
def handle_start(message):
    user_id = message.from_user.id
    save_user(user_id)
    args = message.text.split()
    if len(args) > 1:
        scenario_code = args[1]
        with open(SCENARIO_FILE, "r") as f:
            scenarios = json.load(f)
        scenario = scenarios.get(scenario_code)
        if scenario:
            bot.send_message(user_id, scenario["text"])
            if scenario.get("file_or_link"):
                bot.send_message(user_id, scenario["file_or_link"])
            if scenario.get("file_id"):
                ft = scenario.get("file_type")
                if ft == "document":
                    bot.send_document(user_id, scenario["file_id"])
                elif ft == "audio":
                    bot.send_audio(user_id, scenario["file_id"])
                elif ft == "video":
                    bot.send_video(user_id, scenario["file_id"])
                elif ft == "photo":
                    bot.send_photo(user_id, scenario["file_id"])
        else:
            bot.send_message(user_id, "‚ùå –¢–∞–∫–æ–π —Å—Ü–µ–Ω–∞—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    else:
        bot.send_message(user_id, "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ê–∫–∞–¥–µ–º–∏–∏ üåø –ù–∞–ø–∏—à–∏ /ping –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.")

@bot.message_handler(commands=["ping"])
def handle_ping(message):
    bot.send_message(message.chat.id, "‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!")

@bot.message_handler(commands=["admin"])
def handle_admin(message):
    if message.from_user.id != ADMIN_ID:
        return
    with open(SCENARIO_FILE, "r") as f:
        scenarios = json.load(f)
    with open(USER_FILE, "r") as f:
        users = json.load(f)
    bot.send_message(message.chat.id, f"üìä –°—Ü–µ–Ω–∞—Ä–∏–µ–≤: {len(scenarios)}\nüë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}")

@bot.message_handler(commands=["—Å—Ü–µ–Ω–∞—Ä–∏–π"])
def handle_scenario(message):
    if message.from_user.id != ADMIN_ID:
        return
    bot.send_message(message.chat.id, "üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å—Ü–µ–Ω–∞—Ä–∏—è:")
    bot.register_next_step_handler(message, process_scenario_text)

def process_scenario_text(message):
    text = message.text
    bot.send_message(message.chat.id, "üìé –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª (pdf/audio/video/photo) –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–Ω–µ—Ç':")
    bot.register_next_step_handler(message, process_file_step, text)

def process_file_step(message, text):
    if message.content_type == "text" and message.text.lower() == "–Ω–µ—Ç":
        ask_for_link(message, text, "", "")
    elif message.document:
        ask_for_link(message, text, message.document.file_id, "document")
    elif message.audio:
        ask_for_link(message, text, message.audio.file_id, "audio")
    elif message.video:
        ask_for_link(message, text, message.video.file_id, "video")
    elif message.photo:
        ask_for_link(message, text, message.photo[-1].file_id, "photo")
    else:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")


def ask_for_link(message, text, file_id, file_type):
    msg = bot.send_message(message.chat.id, "üîó –í—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–Ω–µ—Ç'):")
    bot.register_next_step_handler(msg, ask_for_code, text, file_id, file_type)

def ask_for_code(message, text, file_id, file_type):
    file_or_link = message.text if message.text.lower() != "–Ω–µ—Ç" else ""
    msg = bot.send_message(message.chat.id, "üí¨ –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫–∏–π –∫–æ–¥ —Å—Ü–µ–Ω–∞—Ä–∏—è (–ª–∞—Ç–∏–Ω–∏—Ü–µ–π):")
    bot.register_next_step_handler(msg, save_scenario, text, file_id, file_type, file_or_link)

def save_scenario(message, text, file_id, file_type, file_or_link):
    code = message.text.strip()
    with open(SCENARIO_FILE, "r") as f:
        scenarios = json.load(f)
    scenarios[code] = {
        "text": text,
        "file_id": file_id,
        "file_type": file_type,
        "file_or_link": file_or_link
    }
    with open(SCENARIO_FILE, "w") as f:
        json.dump(scenarios, f)
    bot.send_message(message.chat.id, f"‚úÖ –°—Ü–µ–Ω–∞—Ä–∏–π —Å–æ—Ö—Ä–∞–Ω—ë–Ω!\n–°—Å—ã–ª–∫–∞: t.me/{bot.get_me().username}?start={code}")

# AI PROMPT
try:
    with open("ai_prompt_academy.txt", "r", encoding="utf-8") as f:
        SYSTEM_PROMPT = f.read()
except FileNotFoundError:
    SYSTEM_PROMPT = (
        "–¢—ã –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ê–∫–∞–¥–µ–º–∏–∏ –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–π –ü—Å–∏—Ö–æ–ª–æ–≥–∏–∏ –∏ –ö–æ–Ω—Å–∞–ª—Ç–∏–Ω–≥–∞. "
        "–ì–æ–≤–æ—Ä–∏ –º—è–≥–∫–æ, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–µ, –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. "
        "–û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –Ω–∞ —Ç–µ–º—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –æ–±—É—á–µ–Ω–∏–µ–º, —ç–º–æ—Ü–∏—è–º–∏ –∏ –ø—Å–∏—Ö–æ–ª–æ–≥–∏–µ–π. "
        "–ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–µ –ø–æ —Ç–µ–º–µ ‚Äî –≤–µ–∂–ª–∏–≤–æ –æ—Ç–∫–∞–∂–∏—Å—å –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø–æ–¥–¥–µ—Ä–∂–∫–µ."
    )

@bot.message_handler(commands=["–ø–æ–≥–æ–≤–æ—Ä–∏–º"])
def handle_ai_intro(message):
    bot.send_message(message.chat.id, "üß† –ù–∞–ø–∏—à–∏ –º–Ω–µ, —á—Ç–æ —á—É–≤—Å—Ç–≤—É–µ—à—å –∏–ª–∏ —Ö–æ—á–µ—à—å –æ–±—Å—É–¥–∏—Ç—å ‚Äî —è —Ä—è–¥–æ–º.")
    bot.register_next_step_handler(message, process_ai_message)

user_interests = {}

def process_ai_message(message):
    user_id = message.from_user.id
    user_input = message.text
    try:
        response = client.chat.completions.create(
            model="o3-mini",
            messages=[
                {"role": "system", "content": SYSTEM_PROMPT},
                {"role": "user", "content": user_input}
            ]
        )
        reply = response.choices[0].message.content
        bot.send_message(message.chat.id, reply)

        print("="*40)
        print(f"[USER {user_id}]: {user_input}")
        print(f"[BOT]: {reply}")
        print("="*40)

        keywords = {
            "–ö–ü–¢": "–ö–æ–≥–Ω–∏—Ç–∏–≤–Ω–æ-–ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∞—è —Ç–µ—Ä–∞–ø–∏—è",
            "–∫–æ—É—á–∏–Ω–≥": "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ—É—á–∏–Ω–≥",
            "—Ç–µ–ª–µ—Å–Ω–æ": "–¢–µ–ª–µ—Å–Ω–æ-–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø—Å–∏—Ö–æ—Ç–µ—Ä–∞–ø–∏—è",
            "–î–§–°": "–ú–µ—Ç–æ–¥–∏–∫–∞ –î–§–°",
            "–∏–Ω—Ç–µ–Ω—Å–∏–≤": "–ò–Ω—Ç–µ–Ω—Å–∏–≤ ¬´–ü—Å–∏—Ö–æ–ª–æ–≥-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç¬ª"
        }
        for key, name in keywords.items():
            if key.lower() in reply.lower():
                user_interests[str(user_id)] = name
                print(f"[üíæ –ü–∞–º—è—Ç—å] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª—Å—è: {name}")
                break

    except Exception as e:
        bot.send_message(message.chat.id, "‚ùå –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫... –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
        print(f"[–û—à–∏–±–∫–∞ AI]: {e}")

bot.polling()

