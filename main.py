import telebot
import os
import json
from openai import OpenAI

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
BOT_TOKEN = os.environ.get("BOT_TOKEN")
ADMIN_ID = int(os.environ.get("ADMIN_ID", 0))
OPENAI_API_KEY = os.environ.get("OPENAI_API_KEY")

bot = telebot.TeleBot(BOT_TOKEN)

SCENARIO_FILE = "scenario_store.json"
USER_FILE = "user_db.json"

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç OpenAI —Å ProxyAPI
client = OpenAI(
    api_key=OPENAI_API_KEY,
    base_url="https://api.proxyapi.ru/openai/v1",
)

# –§–∞–π–ª—ã —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
if not os.path.exists(SCENARIO_FILE):
    with open(SCENARIO_FILE, "w") as f:
        json.dump({}, f)

if not os.path.exists(USER_FILE):
    with open(USER_FILE, "w") as f:
        json.dump([], f)

def save_user(user_id):
    with open(USER_FILE, "r") as f:
        users = json.load(f)
    if user_id not in users:
        users.append(user_id)
        with open(USER_FILE, "w") as f:
            json.dump(users, f)

@bot.message_handler(commands=["start"])
def handle_start(message):
    user_id = message.from_user.id
    save_user(user_id)
    args = message.text.split()
    if len(args) > 1:
        scenario_code = args[1]
        with open(SCENARIO_FILE, "r") as f:
            scenarios = json.load(f)
        scenario = scenarios.get(scenario_code)
        if scenario:
            bot.send_message(user_id, scenario["text"])
            if scenario.get("file_or_link"):
                bot.send_message(user_id, scenario["file_or_link"])
            if scenario.get("file_id"):
                file_type = scenario.get("file_type")
                if file_type == "document":
                    bot.send_document(user_id, scenario["file_id"])
                elif file_type == "audio":
                    bot.send_audio(user_id, scenario["file_id"])
                elif file_type == "video":
                    bot.send_video(user_id, scenario["file_id"])
                elif file_type == "photo":
                    bot.send_photo(user_id, scenario["file_id"])
        else:
            bot.send_message(user_id, "‚ùå –¢–∞–∫–æ–π —Å—Ü–µ–Ω–∞—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    else:
        bot.send_message(user_id, "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ê–∫–∞–¥–µ–º–∏–∏ üåø –ù–∞–ø–∏—à–∏ /ping –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.")

@bot.message_handler(commands=["ping"])
def handle_ping(message):
    bot.send_message(message.chat.id, "‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!")

@bot.message_handler(commands=["–ø–æ–≥–æ–≤–æ—Ä–∏–º"])
def handle_ai_intro(message):
    bot.send_message(message.chat.id, "üß† –ù–∞–ø–∏—à–∏ –º–Ω–µ, —á—Ç–æ —á—É–≤—Å—Ç–≤—É–µ—à—å –∏–ª–∏ —Ö–æ—á–µ—à—å –æ–±—Å—É–¥–∏—Ç—å ‚Äî —è —Ä—è–¥–æ–º.")
    bot.register_next_step_handler(message, process_ai_message)

# –ü—Ä–æ—Å—Ç–æ–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º—Ç
SYSTEM_PROMPT = (
    "–¢—ã –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ê–∫–∞–¥–µ–º–∏–∏ –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–π –ü—Å–∏—Ö–æ–ª–æ–≥–∏–∏ –∏ –ö–æ–Ω—Å–∞–ª—Ç–∏–Ω–≥–∞. "
    "–ì–æ–≤–æ—Ä–∏ –º—è–≥–∫–æ, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–µ, –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. "
    "–û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –Ω–∞ —Ç–µ–º—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –æ–±—É—á–µ–Ω–∏–µ–º, —ç–º–æ—Ü–∏—è–º–∏ –∏ –ø—Å–∏—Ö–æ–ª–æ–≥–∏–µ–π. "
    "–ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–µ –ø–æ —Ç–µ–º–µ ‚Äî –≤–µ–∂–ª–∏–≤–æ –æ—Ç–∫–∞–∂–∏—Å—å –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø–æ–¥–¥–µ—Ä–∂–∫–µ."
)

def process_ai_message(message):
    user_id = message.from_user.id
    user_input = message.text

    try:
        response = client.chat.completions.create(
            model="o3-mini",
            messages=[
                {"role": "system", "content": SYSTEM_PROMPT},
                {"role": "user", "content": user_input}
            ],
            temperature=0.8,
            max_tokens=500
        )
        reply = response.choices[0].message.content
        bot.send_message(message.chat.id, reply)
    except Exception as e:
        print(f"[AI Error]: {e}")
        bot.send_message(message.chat.id, "‚ùå –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫... –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ.")

bot.polling()


