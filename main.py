import telebot
import os
import json

BOT_TOKEN = os.environ.get("BOT_TOKEN")
ADMIN_ID = int(os.environ.get("ADMIN_ID", 0))

bot = telebot.TeleBot(BOT_TOKEN)

SCENARIO_FILE = "scenario_store.json"
USER_FILE = "user_db.json"

# Ensure scenario and user files exist
if not os.path.exists(SCENARIO_FILE):
    with open(SCENARIO_FILE, "w") as f:
        json.dump({}, f)

if not os.path.exists(USER_FILE):
    with open(USER_FILE, "w") as f:
        json.dump([], f)

# Save user to database
def save_user(user_id):
    with open(USER_FILE, "r") as f:
        users = json.load(f)
    if user_id not in users:
        users.append(user_id)
        with open(USER_FILE, "w") as f:
            json.dump(users, f)

# /start handler
@bot.message_handler(commands=["start"])
def handle_start(message):
    user_id = message.from_user.id
    save_user(user_id)

    args = message.text.split()
    if len(args) > 1:
        scenario_code = args[1]
        with open(SCENARIO_FILE, "r") as f:
            scenarios = json.load(f)
        scenario = scenarios.get(scenario_code)
        if scenario:
            bot.send_message(user_id, scenario["text"])
            if scenario.get("file_or_link"):
                bot.send_message(user_id, scenario["file_or_link"])
        else:
            bot.send_message(user_id, "‚ùå –¢–∞–∫–æ–π —Å—Ü–µ–Ω–∞—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    else:
        bot.send_message(user_id, "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ê–∫–∞–¥–µ–º–∏–∏ üåø –ù–∞–ø–∏—à–∏ /ping –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.")

# /ping
@bot.message_handler(commands=["ping"])
def handle_ping(message):
    bot.send_message(message.chat.id, "‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!")

# /admin
@bot.message_handler(commands=["admin"])
def handle_admin(message):
    if message.from_user.id != ADMIN_ID:
        return
    with open(SCENARIO_FILE, "r") as f:
        scenarios = json.load(f)
    with open(USER_FILE, "r") as f:
        users = json.load(f)
    bot.send_message(message.chat.id, f"üìä –°—Ü–µ–Ω–∞—Ä–∏–µ–≤: {len(scenarios)}\nüë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}")

# /—Å—Ü–µ–Ω–∞—Ä–∏–∏
@bot.message_handler(commands=["—Å—Ü–µ–Ω–∞—Ä–∏–∏"])
def handle_list_scenarios(message):
    if message.from_user.id != ADMIN_ID:
        return
    with open(SCENARIO_FILE, "r") as f:
        scenarios = json.load(f)
    if not scenarios:
        bot.send_message(message.chat.id, "üì≠ –°—Ü–µ–Ω–∞—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
    else:
        reply = "üìö –°–ø–∏—Å–æ–∫ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤:\n"
        for code, data in scenarios.items():
            short = data["text"][:40].replace('\n', ' ') + "..." if len(data["text"]) > 40 else data["text"]
            reply += f"üîπ `{code}` ‚Äî {short}\n"
        bot.send_message(message.chat.id, reply, parse_mode="Markdown")

# /—Å—Ü–µ–Ω–∞—Ä–∏–π
@bot.message_handler(commands=["—Å—Ü–µ–Ω–∞—Ä–∏–π"])
def handle_scenario(message):
    if message.from_user.id != ADMIN_ID:
        return

    msg = bot.send_message(message.chat.id, "üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å—Ü–µ–Ω–∞—Ä–∏—è:")
    bot.register_next_step_handler(msg, process_scenario_text)

def process_scenario_text(message):
    text = message.text
    msg = bot.send_message(message.chat.id, "üîó –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Å—Å—ã–ª–∫—É –∏–ª–∏ —Ñ–∞–π–ª (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ), –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç':")
    bot.register_next_step_handler(msg, process_scenario_link, text)

def process_scenario_link(message, text):
    file_or_link = message.text if message.text.lower() != "–Ω–µ—Ç" else ""
    msg = bot.send_message(message.chat.id, "üí¨ –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫–∏–π –∫–æ–¥ —Å—Ü–µ–Ω–∞—Ä–∏—è (–ª–∞—Ç–∏–Ω–∏—Ü–µ–π):")
    bot.register_next_step_handler(msg, save_scenario, text, file_or_link)

def save_scenario(message, text, file_or_link):
    code = message.text.strip()
    with open(SCENARIO_FILE, "r") as f:
        scenarios = json.load(f)
    scenarios[code] = {"text": text, "file_or_link": file_or_link}
    with open(SCENARIO_FILE, "w") as f:
        json.dump(scenarios, f)
    bot.send_message(message.chat.id, f"‚úÖ –°—Ü–µ–Ω–∞—Ä–∏–π —Å–æ—Ö—Ä–∞–Ω—ë–Ω!\n–°—Å—ã–ª–∫–∞: t.me/{bot.get_me().username}?start={code}")

# /—Ä–∞—Å—Å—ã–ª–∫–∞
@bot.message_handler(commands=["—Ä–∞—Å—Å—ã–ª–∫–∞"])
def handle_broadcast(message):
    if message.from_user.id != ADMIN_ID:
        return
    msg = bot.send_message(message.chat.id, "üì£ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:")
    bot.register_next_step_handler(msg, process_broadcast)

def process_broadcast(message):
    text = message.text
    confirm = bot.send_message(message.chat.id, f"‚úÖ –í–æ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ:\n{text}\n\n–û—Ç–ø—Ä–∞–≤–ª—è–µ–º?", reply_markup=confirm_keyboard())
    bot.register_next_step_handler(confirm, confirm_broadcast, text)

def confirm_keyboard():
    markup = telebot.types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    markup.add("–î–∞", "–ù–µ—Ç")
    return markup

def confirm_broadcast(message, text):
    if message.text == "–î–∞":
        with open(USER_FILE, "r") as f:
            users = json.load(f)
        count = 0
        for uid in users:
            try:
                bot.send_message(uid, text)
                count += 1
            except:
                pass
        bot.send_message(message.chat.id, f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {count}")
    else:
        bot.send_message(message.chat.id, "‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")

bot.polling()
