import telebot
import os
import json

BOT_TOKEN = os.environ.get("BOT_TOKEN")
ADMIN_ID = int(os.environ.get("ADMIN_ID", 0))

bot = telebot.TeleBot(BOT_TOKEN)

SCENARIO_FILE = "scenario_store.json"
USER_FILE = "user_db.json"

if not os.path.exists(SCENARIO_FILE):
    with open(SCENARIO_FILE, "w") as f:
        json.dump({}, f)

if not os.path.exists(USER_FILE):
    with open(USER_FILE, "w") as f:
        json.dump([], f)

def save_user(user_id):
    with open(USER_FILE, "r") as f:
        users = json.load(f)
    if user_id not in users:
        users.append(user_id)
        with open(USER_FILE, "w") as f:
            json.dump(users, f)

@bot.message_handler(commands=["start"])
def handle_start(message):
    user_id = message.from_user.id
    save_user(user_id)
    args = message.text.split()
    if len(args) > 1:
        scenario_code = args[1]
        with open(SCENARIO_FILE, "r") as f:
            scenarios = json.load(f)
        scenario = scenarios.get(scenario_code)
        if scenario:
            bot.send_message(user_id, scenario["text"])
            if scenario.get("file_or_link"):
                bot.send_message(user_id, scenario["file_or_link"])
            if scenario.get("file_id"):
                file_type = scenario.get("file_type")
                if file_type == "document":
                    bot.send_document(user_id, scenario["file_id"])
                elif file_type == "audio":
                    bot.send_audio(user_id, scenario["file_id"])
                elif file_type == "video":
                    bot.send_video(user_id, scenario["file_id"])
                elif file_type == "photo":
                    bot.send_photo(user_id, scenario["file_id"])
        else:
            bot.send_message(user_id, "‚ùå –¢–∞–∫–æ–π —Å—Ü–µ–Ω–∞—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    else:
        bot.send_message(user_id, "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ê–∫–∞–¥–µ–º–∏–∏ üåø –ù–∞–ø–∏—à–∏ /ping –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.")

@bot.message_handler(commands=["ping"])
def handle_ping(message):
    bot.send_message(message.chat.id, "‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!")

@bot.message_handler(commands=["admin"])
def handle_admin(message):
    if message.from_user.id != ADMIN_ID:
        return
    with open(SCENARIO_FILE, "r") as f:
        scenarios = json.load(f)
    with open(USER_FILE, "r") as f:
        users = json.load(f)
    bot.send_message(message.chat.id, f"üìä –°—Ü–µ–Ω–∞—Ä–∏–µ–≤: {len(scenarios)}\nüë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}")

@bot.message_handler(commands=["—Å—Ü–µ–Ω–∞—Ä–∏–π"])
def handle_scenario(message):
    if message.from_user.id != ADMIN_ID:
        return
    bot.send_message(message.chat.id, "üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å—Ü–µ–Ω–∞—Ä–∏—è:")
    bot.register_next_step_handler(message, process_scenario_text)

def process_scenario_text(message):
    text = message.text
    bot.send_message(message.chat.id, "üìé –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª (pdf/audio/video/photo) –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–Ω–µ—Ç':")
    bot.register_next_step_handler(message, process_file_step, text)

def process_file_step(message, text):
    if message.content_type == "text" and message.text.lower() == "–Ω–µ—Ç":
        file_id = ""
        file_type = ""
        ask_for_link(message, text, file_id, file_type)
    elif message.document:
        file_id = message.document.file_id
        file_type = "document"
        ask_for_link(message, text, file_id, file_type)
    elif message.audio:
        file_id = message.audio.file_id
        file_type = "audio"
        ask_for_link(message, text, file_id, file_type)
    elif message.video:
        file_id = message.video.file_id
        file_type = "video"
        ask_for_link(message, text, file_id, file_type)
    elif message.photo:
        file_id = message.photo[-1].file_id
        file_type = "photo"
        ask_for_link(message, text, file_id, file_type)
    else:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
        return

def ask_for_link(message, text, file_id, file_type):
    msg = bot.send_message(message.chat.id, "üîó –í—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–Ω–µ—Ç'):")
    bot.register_next_step_handler(msg, ask_for_code, text, file_id, file_type)

def ask_for_code(message, text, file_id, file_type):
    file_or_link = message.text if message.text.lower() != "–Ω–µ—Ç" else ""
    msg = bot.send_message(message.chat.id, "üí¨ –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫–∏–π –∫–æ–¥ —Å—Ü–µ–Ω–∞—Ä–∏—è (–ª–∞—Ç–∏–Ω–∏—Ü–µ–π):")
    bot.register_next_step_handler(msg, save_scenario, text, file_id, file_type, file_or_link)

def save_scenario(message, text, file_id, file_type, file_or_link):
    code = message.text.strip()
    with open(SCENARIO_FILE, "r") as f:
        scenarios = json.load(f)
    scenarios[code] = {
        "text": text,
        "file_id": file_id,
        "file_type": file_type,
        "file_or_link": file_or_link
    }
    with open(SCENARIO_FILE, "w") as f:
        json.dump(scenarios, f)
    bot.send_message(message.chat.id, f"‚úÖ –°—Ü–µ–Ω–∞—Ä–∏–π —Å–æ—Ö—Ä–∞–Ω—ë–Ω!\n–°—Å—ã–ª–∫–∞: t.me/{bot.get_me().username}?start={code}")

bot.polling()

