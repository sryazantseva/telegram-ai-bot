import telebot
import os
import json
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, InputMediaDocument
from datetime import datetime, timedelta
import threading
import time

BOT_TOKEN = os.environ.get("BOT_TOKEN")
ADMIN_ID = int(os.environ.get("ADMIN_ID", 0))

bot = telebot.TeleBot(BOT_TOKEN)

SCENARIO_FILE = "scenario_store.json"
USER_FILE = "user_db.json"
BROADCAST_FILE = "broadcasts.json"

for file in [SCENARIO_FILE, USER_FILE, BROADCAST_FILE]:
    if not os.path.exists(file):
        with open(file, "w") as f:
            json.dump({} if file != USER_FILE else [], f)

def save_user(user):
    with open(USER_FILE, "r") as f:
        users = json.load(f)
    user_data = {
        "id": user.id,
        "first_name": user.first_name,
        "username": getattr(user, "username", ""),
        "phone": ""  # –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∂–µ
    }
    if user.id not in [u["id"] for u in users]:
        users.append(user_data)
        with open(USER_FILE, "w") as f:
            json.dump(users, f)

@bot.message_handler(commands=["start"])
def handle_start(message):
    save_user(message.from_user)
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ê–∫–∞–¥–µ–º–∏–∏ üåø –ù–∞–ø–∏—à–∏ /ping –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.")

@bot.message_handler(commands=["ping"])
def handle_ping(message):
    bot.send_message(message.chat.id, "‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!")

@bot.message_handler(commands=["—Ä–∞—Å—Å—ã–ª–∫–∞"])
def handle_broadcast(message):
    if message.from_user.id != ADMIN_ID:
        return
    bot.send_message(message.chat.id, "üì£ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:")
    bot.register_next_step_handler(message, get_broadcast_text)

def get_broadcast_text(message):
    text = message.text
    bot.send_message(message.chat.id, "üìé –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç'):")
    bot.register_next_step_handler(message, get_broadcast_file, text)

def get_broadcast_file(message, text):
    file_id = None
    if message.text and message.text.lower() == '–Ω–µ—Ç':
        file_id = None
    elif message.document:
        file_id = message.document.file_id
    else:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return

    bot.send_message(message.chat.id, "üîó –í—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É (–∏–ª–∏ '–Ω–µ—Ç'):")
    bot.register_next_step_handler(message, preview_broadcast, text, file_id)

def preview_broadcast(message, text, file_id):
    link = message.text if message.text.lower() != '–Ω–µ—Ç' else ""
    preview = f"<b>üì¢ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å—Å—ã–ª–∫–∏:</b>\n\n{text}"
    if link:
        preview += f"\n\nüîó <a href='{link}'>–°—Å—ã–ª–∫–∞</a>"

    markup = InlineKeyboardMarkup()
    markup.add(
        InlineKeyboardButton("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–µ–π—á–∞—Å", callback_data=f"send_now|{text}|{file_id or 'no'}|{link}"),
        InlineKeyboardButton("‚è∞ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –∑–∞–≤—Ç—Ä–∞", callback_data=f"send_later|{text}|{file_id or 'no'}|{link}")
    )
    bot.send_message(message.chat.id, preview, parse_mode='HTML', reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("send_"))
def handle_send(call):
    action, text, file_id, link = call.data.split("|", 3)
    send_time = datetime.now()
    if action == "send_later":
        send_time = send_time + timedelta(days=1)
        send_time = send_time.replace(hour=12, minute=0, second=0)
        schedule_broadcast(text, file_id if file_id != 'no' else None, link, send_time)
        bot.send_message(call.message.chat.id, "üïì –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ 12:00 –ú–°–ö")
    else:
        do_broadcast(text, file_id if file_id != 'no' else None, link)

def schedule_broadcast(text, file_id, link, when):
    def task():
        time_to_wait = (when - datetime.now()).total_seconds()
        time.sleep(max(0, time_to_wait))
        do_broadcast(text, file_id, link)
    threading.Thread(target=task).start()

def do_broadcast(text, file_id, link):
    with open(USER_FILE, "r") as f:
        users = json.load(f)
    count = 0
    for user in users:
        try:
            uid = user["id"]
            bot.send_message(uid, text)
            if file_id:
                bot.send_document(uid, file_id)
            if link:
                bot.send_message(uid, link)
            count += 1
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ {uid}: {e}")
    print(f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {count}")

bot.polling()
